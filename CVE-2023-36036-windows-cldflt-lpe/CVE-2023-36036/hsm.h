#pragma once
/*****************************************************************************/
/* ReparseDataHsm.h                       Copyright (c) Ladislav Zezula 2018 */
/*---------------------------------------------------------------------------*/
/* Interface of the HSM reparse data structures                              */
/*---------------------------------------------------------------------------*/
/*   Date    Ver   Who  Comment                                              */
/* --------  ----  ---  -------                                              */
/* 06.09.18  1.00  Lad  The first version of ReparseDataHsm.h                */
/*****************************************************************************/

#include<Windows.h>


#ifndef __REPARSE_DATA_HSM_H__
#define __REPARSE_DATA_HSM_H__

//-----------------------------------------------------------------------------
// Defines

#define HSM_BITMAP_MAGIC                0x70527442  // 'BtRp'
#define HSM_BITMAP_ELEMENTS             0x05        // Fixed number of elements for HSM bitmap
#define HSM_FILE_MAGIC                  0x70526546  // 'FeRp'
#define HSM_FILE_ELEMENTS               0x09        // Fixed number of elements for HSM reparse data

#define HSM_DATA_HAVE_CRC               0x02        // If set, then the data has CRC

#define HSM_XXX_DATA_SIZE               0x10
#define HSM_MIN_DATA_SIZE(elements)    (HSM_XXX_DATA_SIZE + (elements * sizeof(HSM_ELEMENT_INFO)))

#define HSM_ELEMENT_TYPE_NONE           0x00
#define HSM_ELEMENT_TYPE_UINT64         0x06
#define HSM_ELEMENT_TYPE_BYTE           0x07
#define HSM_ELEMENT_TYPE_UINT32         0x0A
#define HSM_ELEMENT_TYPE_BITMAP         0x11
#define HSM_ELEMENT_TYPE_MAX            0x12

//-----------------------------------------------------------------------------
// Data structures for HSM reparse data

typedef struct _HSM_ELEMENT_INFO
{
    USHORT Type;                        // Type of the element (?). One of HSM_ELEMENT_TYPE_XXX
    USHORT Length;                      // Length of the element data in bytes
    ULONG  Offset;                      // Offset of the element data, relative to begin of HSM_DATA. Aligned to 4 bytes
} HSM_ELEMENT_INFO, * PHSM_ELEMENT_INFO;

typedef struct _HSM_DATA
{
    ULONG  Magic;                       // 0x70527442 ('pRtB') for bitmap data, 0x70526546 ('FeRp') for file data
    ULONG  Crc32;                       // CRC32 of the following data (calculated by RtlComputeCrc32)
    ULONG  Length;                      // Length of the entire HSM_DATA in bytes
    USHORT Flags;                       // HSM_DATA_XXXX
    USHORT NumberOfElements;            // Number of elements
    HSM_ELEMENT_INFO ElementInfos[0xB];   // Array of element infos. There is fixed maximal items for bitmap and reparse data
} HSM_DATA, * PHSM_DATA;

typedef struct _HSM_REPARSE_DATA
{
    USHORT Flags;                       // Lower 8 bits is revision (must be 1 as of Windows 10 16299)
    // Flags: 0x8000 = Data needs to be decompressed by RtlCompressBuffer
    USHORT Length;                      // Length of the HSM_REPARSE_DATA structure (including "Flags" and "Length")

    HSM_DATA FileData;                  // HSM data
} HSM_REPARSE_DATA, * PHSM_REPARSE_DATA;


typedef struct _REPARSE_DATA_BUFFER {
    ULONG ReparseTag;         // Reparse tag type
    USHORT ReparseDataLength; // Length of the reparse data
    USHORT Reserved;          // Used internally by NTFS to store remaining length
    union {
        // Structure for IO_REPARSE_TAG_SYMLINK
        // Handled by nt!IoCompleteRequest
        struct {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            ULONG Flags;
            WCHAR PathBuffer[1];
            /* Example of distinction between substitute and print names:
            // mklink /d ldrive c:\
            // SubstituteName: c:\\??\
            // PrintName: c:\
            */
        } SymbolicLinkReparseBuffer;

        // Structure for IO_REPARSE_TAG_MOUNT_POINT
        // Handled by nt!IoCompleteRequest
        struct {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;

        // Structure for IO_REPARSE_TAG_WIM
        // Handled by wimmount!FPOpenReparseTarget->wimserv.dll
        // (wimsrv!ImageExtract)
        struct {
            GUID ImageGuid;           // GUID of the mounted VIM image
            BYTE ImagePathHash[0x14]; // Hash of the path to the file within the
            // image
        } WimImageReparseBuffer;

        // Structure for IO_REPARSE_TAG_WOF
        // Handled by FSCTL_GET_EXTERNAL_BACKING, FSCTL_SET_EXTERNAL_BACKING in
        // NTFS (Windows 10+)
        struct {
            //-- WOF_EXTERNAL_INFO --------------------
            ULONG Wof_Version;  // Should be 1 (WOF_CURRENT_VERSION)
            ULONG Wof_Provider; // Should be 2 (WOF_PROVIDER_FILE)

            //-- FILE_PROVIDER_EXTERNAL_INFO_V1 --------------------
            ULONG FileInfo_Version; // Should be 1 (FILE_PROVIDER_CURRENT_VERSION)
            ULONG
                FileInfo_Algorithm; // Usually 0 (FILE_PROVIDER_COMPRESSION_XPRESS4K)
        } WofReparseBuffer;

        // Structure for IO_REPARSE_TAG_APPEXECLINK
        struct {
            ULONG StringCount;   // Number of the strings in the StringList, separated
            // by '\0'
            WCHAR StringList[1]; // Multistring (strings separated by '\0',
            // terminated by '\0\0')
        } AppExecLinkReparseBuffer;

        // Structure for IO_REPARSE_TAG_WCI (0x80000018)
        struct {
            ULONG Version; // Expected to be 1 by wcifs.sys
            ULONG Reserved;
            GUID LookupGuid;      // GUID used for lookup in wcifs!WcLookupLayer
            USHORT WciNameLength; // Length of the WCI subname, in bytes
            WCHAR WciName[1];     // The WCI subname (not zero terminated)
        } WcifsReparseBuffer;

        // Handled by cldflt.sys!HsmpRpReadBuffer
        HSM_REPARSE_DATA hsm_reparse_data;

        // Dummy structure
        struct {
            UCHAR DataBuffer[1];
        } GenericReparseBuffer;
    } DUMMYUNIONNAME;
} REPARSE_DATA_BUFFER, * PREPARSE_DATA_BUFFER;









#endif  // __REPARSE_DATA_HSM_H__
